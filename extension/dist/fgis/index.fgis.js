(function(T){"use strict";var z=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},N={exports:{}};(function(s,e){(function(o,a){a(s)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:z,function(o){var a,i;if(!((i=(a=globalThis.chrome)==null?void 0:a.runtime)!=null&&i.id))throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const u="The message port closed before a response was received.",w=p=>{const y={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(y).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class b extends WeakMap{constructor(r,g=void 0){super(g),this.createItem=r}get(r){return this.has(r)||this.set(r,this.createItem(r)),super.get(r)}}const v=n=>n&&typeof n=="object"&&typeof n.then=="function",_=(n,r)=>(...g)=>{p.runtime.lastError?n.reject(new Error(p.runtime.lastError.message)):r.singleCallbackArg||g.length<=1&&r.singleCallbackArg!==!1?n.resolve(g[0]):n.resolve(g)},S=n=>n==1?"argument":"arguments",X=(n,r)=>function(m,...A){if(A.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${S(r.minArgs)} for ${n}(), got ${A.length}`);if(A.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${S(r.maxArgs)} for ${n}(), got ${A.length}`);return new Promise((c,d)=>{if(r.fallbackToNoCallback)try{m[n](...A,_({resolve:c,reject:d},r))}catch(t){console.warn(`${n} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,t),m[n](...A),r.fallbackToNoCallback=!1,r.noCallback=!0,c()}else r.noCallback?(m[n](...A),c()):m[n](...A,_({resolve:c,reject:d},r))})},U=(n,r,g)=>new Proxy(r,{apply(m,A,c){return g.call(A,n,...c)}});let P=Function.call.bind(Object.prototype.hasOwnProperty);const E=(n,r={},g={})=>{let m=Object.create(null),A={has(d,t){return t in n||t in m},get(d,t,x){if(t in m)return m[t];if(!(t in n))return;let l=n[t];if(typeof l=="function")if(typeof r[t]=="function")l=U(n,n[t],r[t]);else if(P(g,t)){let h=X(t,g[t]);l=U(n,n[t],h)}else l=l.bind(n);else if(typeof l=="object"&&l!==null&&(P(r,t)||P(g,t)))l=E(l,r[t],g[t]);else if(P(g,"*"))l=E(l,r[t],g["*"]);else return Object.defineProperty(m,t,{configurable:!0,enumerable:!0,get(){return n[t]},set(h){n[t]=h}}),l;return m[t]=l,l},set(d,t,x,l){return t in m?m[t]=x:n[t]=x,!0},defineProperty(d,t,x){return Reflect.defineProperty(m,t,x)},deleteProperty(d,t){return Reflect.deleteProperty(m,t)}},c=Object.create(n);return new Proxy(c,A)},L=n=>({addListener(r,g,...m){r.addListener(n.get(g),...m)},hasListener(r,g){return r.hasListener(n.get(g))},removeListener(r,g){r.removeListener(n.get(g))}}),Y=new b(n=>typeof n!="function"?n:function(g){const m=E(g,{},{getContent:{minArgs:0,maxArgs:0}});n(m)}),W=new b(n=>typeof n!="function"?n:function(g,m,A){let c=!1,d,t=new Promise(k=>{d=function(f){c=!0,k(f)}}),x;try{x=n(g,m,d)}catch(k){x=Promise.reject(k)}const l=x!==!0&&v(x);if(x!==!0&&!l&&!c)return!1;const h=k=>{k.then(f=>{A(f)},f=>{let $;f&&(f instanceof Error||typeof f.message=="string")?$=f.message:$="An unexpected error occurred",A({__mozWebExtensionPolyfillReject__:!0,message:$})}).catch(f=>{console.error("Failed to send onMessage rejected reply",f)})};return h(l?x:t),!0}),ee=({reject:n,resolve:r},g)=>{p.runtime.lastError?p.runtime.lastError.message===u?r():n(new Error(p.runtime.lastError.message)):g&&g.__mozWebExtensionPolyfillReject__?n(new Error(g.message)):r(g)},q=(n,r,g,...m)=>{if(m.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${S(r.minArgs)} for ${n}(), got ${m.length}`);if(m.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${S(r.maxArgs)} for ${n}(), got ${m.length}`);return new Promise((A,c)=>{const d=ee.bind(null,{resolve:A,reject:c});m.push(d),g.sendMessage(...m)})},ne={devtools:{network:{onRequestFinished:L(Y)}},runtime:{onMessage:L(W),onMessageExternal:L(W),sendMessage:q.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:q.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},M={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return y.privacy={network:{"*":M},services:{"*":M},websites:{"*":M}},E(p,ne,y)};o.exports=w(chrome)}else o.exports=globalThis.browser})})(N);var Z=N.exports;function R(){const s=document.querySelector(".right-side");if(s===null)return setTimeout(R,1e3);const e=document.createElement("div"),o=H(),a=I("advanceSettingIndexInput","Индекс"),i=I("advanceSettingTypeInput","Тип"),u=I("advanceSettingPwdInput","ПИН");u.type="password";const w=V(o),p=Q(o,a,i,u),y=J(o),b=C();b.className="btn btn_custom btn_accent btn-icon btn-icon_settings";var v=!1;b.onclick=function(_){v?(a.style.display="none",i.style.display="none",u.style.display="none"):(a.style.display="inline",i.style.display="inline",u.style.display="inline"),v=!v},e.style="margin-top:5px;margin-left:5px;",e.appendChild(o),e.appendChild(w),e.appendChild(p),e.appendChild(y),e.appendChild(b),e.appendChild(a),e.appendChild(i),e.appendChild(u),s.parentElement.appendChild(e)}function D(s){if(!s)return alert("Укажите корректную ссылку.");const e=new URL(s);return{origin:e.origin,documentToken:e.searchParams.get("document_token"),documentId:e.searchParams.get("document_id"),documentType:e.searchParams.get("document_type")}}function G(s){var e=window.open(s,"_blank");e.focus(),logo_docs}function O(s,e,o="Действие успешно выполнено!"){const a=D(s);if(console.log("===== URLPARAMS: ",a),!a.documentToken||!a.documentId||!a.documentType)return alert("Указана не корректная ссылка.");try{return e=Object.assign({id:String(a.documentId),locationOrigin:a.origin,advanceType:a.documentType,document_token:a.documentToken,mode:"applications",module:"ds",isSrd:!0},e),Z.runtime.sendMessage(e).then(i=>{i.done?(i.documentFgisData&&(console.log("data :>> ",i),G(i.documentFgisData.url)),alert(o)):(i.err=i.err.replace("Token is expiredОшибка в адвансе","Срок действия ссылки истек"),i.err=i.err.replace("Token not foundОшибка в адвансе","Указана не корректная ссылка"),alert(i.err)),btn1.style.display="inline"})}catch(i){console.log("activeAction error:>> ",s,e,o,i)}}function F(s){return console.log("sendDocument :>> ",s),O(s,{action:"saveDeclarationDs"},"Документ успешно выгружен и открыт в новой вкладке.")}function j(s,e,o,a){const i=e,u=o,w=a;if(!i||!u&&u!==0){alert("Поля Индекс и Тип обязательны к заполнению");return}return O(s,{action:"signDeclaration",settings:{indexCertif:i,algorithm:u,pwdCertif:w}},"Документ успешно опубликован.")}function H(){const s=B();return s.placeholder="Укажите Advance ссылку на документ...",s.id="advanceLinkInput",s}function I(s,e){const o=B(!1);return o.placeholder=e,o.id=s,o.style="max-width:75px;margin-left:5px;",o.style.display="none",o.value=localStorage.getItem(o.id)||"",o.onchange=function(a){localStorage.setItem(o.id,o.value)},o}function B(s=!0){const e=document.createElement("input");return s&&(e.style="min-width:275px;margin-left:5px;"),e}function V(s){const e=C();return e.id="btnSubmit",e.innerText="Отправить",e.onclick=function(o){return F(s.value)},e}function K(s){const e=D(s);let o=`${e.origin}/api/v3/fgis/${e.documentType}/document/download/${e.documentId}?document_token=${e.documentToken}`;console.log("=== DOWNLOAD: ",o),window.open(o)}function J(s){const e=C();return e.id="btnDownload",e.innerText="Скачать",e.onclick=function(o){const a=D(s.value);let i=document.createElement("a");i.href=`${a.origin}/api/v3/fgis/${a.documentType}/document/download/${a.documentId}?document_token=${a.documentToken}`,i.download="Декларация.zip",document.body.appendChild(i),i.click(),document.body.removeChild(i)},e}function Q(s,e,o,a){const i=C();return i.id="btnSign",i.innerText="Подписать",i.onclick=function(u){return j(s.value,e,o,a)},i}function C(s=!0){let e=document.createElement("button");return e.className="btn btn_custom btn-primary btn-icon",s&&(e.style="margin-left:5px;margin-right:5px;"),e}R(),console.log("srd end :>> "),T.downloadDocument=K,T.sendDocument=F,T.signDocument=j,Object.defineProperty(T,Symbol.toStringTag,{value:"Module"})})(this["docs-fgis-webext"]=this["docs-fgis-webext"]||{});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
