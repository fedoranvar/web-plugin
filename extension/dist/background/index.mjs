(function(){"use strict";var W=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},B={exports:{}};(function(r,e){(function(t,s){s(r)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:W,function(t){var s,i;if(!((i=(s=globalThis.chrome)==null?void 0:s.runtime)!=null&&i.id))throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const n="The message port closed before a response was received.",a=o=>{const l={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(l).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class p extends WeakMap{constructor(d,h=void 0){super(h),this.createItem=d}get(d){return this.has(d)||this.set(d,this.createItem(d)),super.get(d)}}const f=c=>c&&typeof c=="object"&&typeof c.then=="function",_=(c,d)=>(...h)=>{o.runtime.lastError?c.reject(new Error(o.runtime.lastError.message)):d.singleCallbackArg||h.length<=1&&d.singleCallbackArg!==!1?c.resolve(h[0]):c.resolve(h)},u=c=>c==1?"argument":"arguments",C=(c,d)=>function(m,...y){if(y.length<d.minArgs)throw new Error(`Expected at least ${d.minArgs} ${u(d.minArgs)} for ${c}(), got ${y.length}`);if(y.length>d.maxArgs)throw new Error(`Expected at most ${d.maxArgs} ${u(d.maxArgs)} for ${c}(), got ${y.length}`);return new Promise((b,w)=>{if(d.fallbackToNoCallback)try{m[c](...y,_({resolve:b,reject:w},d))}catch(g){console.warn(`${c} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,g),m[c](...y),d.fallbackToNoCallback=!1,d.noCallback=!0,b()}else d.noCallback?(m[c](...y),b()):m[c](...y,_({resolve:b,reject:w},d))})},E=(c,d,h)=>new Proxy(d,{apply(m,y,b){return h.call(y,c,...b)}});let k=Function.call.bind(Object.prototype.hasOwnProperty);const $=(c,d={},h={})=>{let m=Object.create(null),y={has(w,g){return g in c||g in m},get(w,g,x){if(g in m)return m[g];if(!(g in c))return;let A=c[g];if(typeof A=="function")if(typeof d[g]=="function")A=E(c,c[g],d[g]);else if(k(h,g)){let P=C(g,h[g]);A=E(c,c[g],P)}else A=A.bind(c);else if(typeof A=="object"&&A!==null&&(k(d,g)||k(h,g)))A=$(A,d[g],h[g]);else if(k(h,"*"))A=$(A,d[g],h["*"]);else return Object.defineProperty(m,g,{configurable:!0,enumerable:!0,get(){return c[g]},set(P){c[g]=P}}),A;return m[g]=A,A},set(w,g,x,A){return g in m?m[g]=x:c[g]=x,!0},defineProperty(w,g,x){return Reflect.defineProperty(m,g,x)},deleteProperty(w,g){return Reflect.deleteProperty(m,g)}},b=Object.create(c);return new Proxy(b,y)},F=c=>({addListener(d,h,...m){d.addListener(c.get(h),...m)},hasListener(d,h){return d.hasListener(c.get(h))},removeListener(d,h){d.removeListener(c.get(h))}}),oe=new p(c=>typeof c!="function"?c:function(h){const m=$(h,{},{getContent:{minArgs:0,maxArgs:0}});c(m)}),H=new p(c=>typeof c!="function"?c:function(h,m,y){let b=!1,w,g=new Promise(I=>{w=function(D){b=!0,I(D)}}),x;try{x=c(h,m,w)}catch(I){x=Promise.reject(I)}const A=x!==!0&&f(x);if(x!==!0&&!A&&!b)return!1;const P=I=>{I.then(D=>{y(D)},D=>{let M;D&&(D instanceof Error||typeof D.message=="string")?M=D.message:M="An unexpected error occurred",y({__mozWebExtensionPolyfillReject__:!0,message:M})}).catch(D=>{console.error("Failed to send onMessage rejected reply",D)})};return P(A?x:g),!0}),le=({reject:c,resolve:d},h)=>{o.runtime.lastError?o.runtime.lastError.message===n?d():c(new Error(o.runtime.lastError.message)):h&&h.__mozWebExtensionPolyfillReject__?c(new Error(h.message)):d(h)},j=(c,d,h,...m)=>{if(m.length<d.minArgs)throw new Error(`Expected at least ${d.minArgs} ${u(d.minArgs)} for ${c}(), got ${m.length}`);if(m.length>d.maxArgs)throw new Error(`Expected at most ${d.maxArgs} ${u(d.maxArgs)} for ${c}(), got ${m.length}`);return new Promise((y,b)=>{const w=le.bind(null,{resolve:y,reject:b});m.push(w),h.sendMessage(...m)})},ce={devtools:{network:{onRequestFinished:F(oe)}},runtime:{onMessage:F(H),onMessageExternal:F(H),sendMessage:j.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:j.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},L={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return l.privacy={network:{"*":L},services:{"*":L},websites:{"*":L}},$(o,ce,l)};t.exports=a(chrome)}else t.exports=globalThis.browser})})(B);var S=B.exports;class J{constructor(){this.secToken=[],this.started=!1,this.orgId="",this.certificationAuthority=!1,this.esiaOrgInfo=!1,console.log("Init Token")}uintToString(e){var t=String.fromCharCode.apply(null,e),s=decodeURIComponent(escape(t));return s}parseToken(e){e.method=="POST"&&e.requestHeaders&&e.requestHeaders.forEach(t=>{if(t.name=="Authorization"){var s=t.value.replace(/^Bearer\s+/,"");this.setToken(s)}t.name=="orgId"&&this.setOrgId(t.value)})}parseOrganData(e){switch(e.method){case"POST":if(e.url.includes("/api/v1/rds/common/applications")&&e.requestBody.raw.length){var t=JSON.parse(this.uintToString(new Uint8Array(e.requestBody.raw[0].bytes)));this.certificationAuthority||S.storage.local.set({certificationAuthority:JSON.stringify(t.certificationAuthority)})}break}}setOrgId(e){this.orgId!=e&&(this.orgId=e,S.storage.local.set({orgId:e}))}setToken(e){console.log("token :>> ",e,!this.secToken.some(t=>t==e)),e&&(this.secToken.some(t=>t==e)||(this.secToken.push(e),S.storage.local.set({fgisToken:e})))}getOrgId(){return this.orgId}getToken(){return this.secToken.length?this.secToken[this.secToken.length-1]:""}start(){if(!this.started){this.started=!0;var e=["*://10.250.74.17/*","*://srd.fsa.gov.ru/*"];S.webRequest.onBeforeSendHeaders.addListener(this.parseToken.bind(this),{urls:e},["requestHeaders"]),S.webRequest.onBeforeRequest.addListener(this.parseOrganData.bind(this),{urls:e},["requestBody"]),this.setToken(S.storage.local.get("fgisToken"))}}checkToken(){if(this.token.getToken()=="")throw"Нет токена. Залогиньтесь в 10.250.74.17, srd.fsa.gov.ru"}}class Z{constructor(e,t,s,i,n,a){this.advance=e,this.method=t,this.url=s,this.params=i,this.returnType=n,this.description=a}fetch(...e){return this.advance.fetch(this,...e)}}class z{constructor(e,t,s){try{this.agency_code=e.agency_code,this.agency_keyword=e.agency_keyword,this.document_token=e.document_token||null,this.apiVersion=this.document_token?3:2,this.domain=t,this.Endpoint=({method:i,url:n,params:a,returnType:o,description:l})=>new Z(this,i,n,a,o,l),this.advance_type=s,this.repeatCount=0,this.currentUserId=0,this.maxRepeat=5,this.miss_throw=!1,this.data={agencyData:{method:"GET",url:`/api/v${this.apiVersion}/fgis/agency/data`},experts:{method:"GET",url:`/api/v${this.apiVersion}/fgis/agency/experts`},getCurrentUserId:{method:"GET",url:"/Account/GetCurrentUserId",noKeys:!0}},this.statement={queue:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/queue`},show:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/show/{id}`,params:["id"]},init:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/init/{id}`,params:["id"],description:"user_id"},get_url:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/url/{id}`,params:["id"]},set_url:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/set_url`},get_state:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/status/{id}`,params:["id"]},set_status:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/statement/set_status`,description:`id - идентификато документа
                                  user_id - идентификатор пользователя
                                  status - статус репликации
                                  Коды статусов репликации:
                                  Не установлен - NotSet
                                  Готово к выгрузке - ReadyToUpload
                                  Выгружается - Uploading
                                  Ошибка выгрузки - UploadError
                                  Выгружено - Uploaded
                                  Подписывается - Signing
                                  Ошибка подписи - SignError
                                  Подписано - Signed`}},this.document={show:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/show/{id}`,params:["id"]},download_archive:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/download/{id}`,params:["id"]},get_protocols:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/protocols`,params:["id"]},get_file_protocol:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/protocols/files/{fileId}`,params:["id","fileId"],returnType:"blob"},put_file_protocol:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/protocols/files/{fileId}/set_id`,params:["id","fileId"],description:"fgis_file_id - идентификатор загруженного файла протокола во ФГИС сохраняет идентификатор ФГИС файла протокола"},get_document_files:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/applicant/files`,params:["id"]},get_file_document:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/applicant/file/{fileId}`,params:["id","fileId"],returnType:"blob"},put_file_document:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/applicant/file/{fileId}/set_id`,params:["id","fileId"],description:"fgis_file_id - идентификатор загруженного файла протокола во ФГИС сохраняет идентификатор ФГИС файла протокола"},init:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/init/{id}`,params:["id"]},get_state:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/status/{id}`,params:["id"]},set_status:{method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/set_status`,description:`id - идентификато документа
                                    user_id - идентификатор пользователя
                                    status - статус репликации
                                    Коды статусов репликации:
                                    Не установлен - NotSet
                                    Готово к выгрузке - ReadyToUpload
                                    Выгружается - Uploading
                                    Ошибка выгрузки - UploadError
                                    Выгружено - Uploaded
                                    Подписывается - Signing
                                    Ошибка подписи - SignError
                                    Подписано - Signed`},last:{method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/last`},blanks:{method:"GET",url:`/api/v${this.apiVersion}/fgis/STREA/document/blanks/{id}`,params:["id"]}},["product_doc","other_doc","conclusion_doc","sampling_doc","qms_doc","act_doc","cert_doc","transport_doc","cert_type_doc","project_doc","un_rules_doc","concl_expert_doc","test_protocol_doc","contract_doc","decision_doc","cert_other_doc"].forEach(i=>{this.document[i]=this.generate_files_endpoints(i)}),console.log("Advance :>> ",this)}catch(i){console.log("Advance err :>> ",i)}}generate_files_endpoints(e){return{get_list:this.Endpoint({method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/${e}/files`,params:["id"]}),get_file:this.Endpoint({method:"GET",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/${e}/file/{fileId}`,params:["id","fileId"],returnType:"blob"}),put_file_info:this.Endpoint({method:"PUT",url:`/api/v${this.apiVersion}/fgis/${this.advance_type}/document/{id}/${e}/file/{fileId}/set_id`,params:["id","fileId"],description:"fgis_file_id - идентификатор загруженного файла протокола во ФГИС сохраняет идентификатор ФГИС файла протокола"})}}async getCurrentUserId(){if(console.log("currentUserId",this.currentUserId),this.currentUserId)return this.currentUserId;{let e=await this.fetch(this.data.getCurrentUserId);return e&&(this.currentUserId=e),e}}ownException(e){throw e+=`Ошибка в адвансе!\r
`,console.log(e),e}async fetch_with_timeout(e,t,s=3e4){console.log("Start fetch_with_timeout. TimeOut:",s);var i=new AbortController;i.signal;var n=new Promise(function(o,l){setTimeout(()=>{i.abort(),l("Out timeout end")},s)}),a=new Promise(function(o,l){fetch(e,t).then(p=>o(p)).catch(p=>l(p))});return Promise.race([n,a])}fetch(e,t={body:null,params:{}},s=!0,i=!1){i==!1?this.repeatCount=1:this.repeatCount++;try{if(!this.document_token&&!this.agency_code)throw"Не указан ключ agency_code";if(!this.document_token&&!this.agency_keyword)throw"Не указан ключ agency_keyword";let n=e.url;if(e.params){if(!t.hasOwnProperty("params"))return this.ownException("Для этого запроса обязательны параметры.");e.params.forEach(f=>{if(!t.params.hasOwnProperty(f))return this.ownException(`Кажется вы забыли указать обязательный параметр.
                        ${n}
                        Нужны: ${e.params.toString()}
                        Пришли: ${t.params.toString()}
                        `);n=n.replace(`{${f}}`,t.params[f])})}let a=new URL(n,this.domain),o=new FormData,l={method:e.method,credentials:"include"};if(t.body){if(!Array.isArray(t.body))return this.ownException("Body должен быть array!");t.body.forEach(f=>{o.set(f.name,f.value)})}switch(e.method){case"GET":this.document_token?a.searchParams.set("document_token",this.document_token):(a.searchParams.set("agency_code",this.agency_code),a.searchParams.set("agency_keyword",this.agency_keyword));break;case"PUT":this.document_token?o.set("document_token",this.document_token):(o.set("agency_code",this.agency_code),o.set("agency_keyword",this.agency_keyword)),l.body=o;break;case"POST":this.document_token?o.set("document_token",this.document_token):(o.set("agency_code",this.agency_code),o.set("agency_keyword",this.agency_keyword)),l.body=o;break}return console.log("Fgis fetch",a.href,e.noObjResp),(e.hasOwnProperty("timeOut")?this.fetch_with_timeout(a.href,l,e.timeOut):fetch(a.href,l)).then(f=>{if(f.status!=200)throw"Cервер не отвечает"+f;return e.returnType&&e.returnType=="blob"&&f.headers.get("Content-Type")=="text/html"?f.blob():f.json().then(_=>{if(console.log(_),e==this.data.getCurrentUserId)return _;if(_.status=="error")throw this.miss_throw=!0,`Статус error.\r
`+_.message;if(_.status!="success")throw`Неизвестный статус!.\r
`+_.message;return _.data})}).catch(f=>{let _=e.hasOwnProperty("maxRepeat")?e.maxRepeat:this.maxRepeat;if(s&&this.maxRepeat>=this.repeatCount&&!this.miss_throw){console.log("It was repeat",this.repeatCount,"/",_);let u=this;return new Promise(function(C,E){setTimeout(function(){u.fetch(e,t,s,!0).then(k=>C(k)).catch(k=>{E(k)})},1e3)})}else return this.ownException(f)})}catch(n){return console.log("Ошибка в конструкции fetch в Advance",n),this.ownException("Ошибка в конструкции fetch в Advance",n)}}}function T(r){throw console.error(r),r}function G(r){r!=="declarations"&&r!=="applications"&&T("Не известный mode в class Sign.")}class q{constructor(e,t,s,i,n){G(s),this.ids=e,this.mode=s,this.fgis=t,this.settings=i,this.blanks=n,this.signTypeName=this._getSignTypeName(),this.createSignedFileBody=this._getCreateSignedFileBody(),this.logData={},this.sign={registrateBlanks:{method:"POST",url:"api/v1/rss/common/blanks/ids",repeat:!0,maxRepeat:5,timeOut:6e4},createSignedFile:{method:"POST",url:`api/v1/${this.fgis.fgisType}/common/${this.signTypeName}/createSignedFile`,body:this.createSignedFileBody,repeat:!0,maxRepeat:5,timeOut:6e4},createsignui:{method:"POST",url:"/api/v1/storage/common/signop/createsignui",repeat:!0,maxRepeat:5,timeOut:6e4}}}_getCreateSignedFileBody(){if(this.fgis.fgisType=="rss"&&this.mode=="declarations")return this.blanks;if(this.fgis.fgisType=="rds"||this.fgis.fgisType=="rss"||this.fgis.fgisType=="srd")return{ids:this.ids,verifySignature:!0};T("Не известный _getCreateSignedFileBody")}_getSignTypeName(){if(this.mode=="applications")return"applications";if(this.fgis.fgisType=="rds"||this.fgis.fgisType=="srd")return"declarations";if(this.fgis.fgisType=="rss")return"certificates";T("Не известный _getSignTypeName")}start(){return this.createSignedFile().then(()=>this.createsignui()).then(()=>this.signDocument())}createSignedFile(){var e=this;function t(a){if(e.fgis.fgisType=="rds"||e.fgis.fgisType=="srd")return a;if(e.fgis.fgisType=="rss")return e.mode=="declarations"?{items:[a]}:{items:a};T("Не может спарсить результат в _parseRes, "+e.fgis.fgisType)}function s(a,o){let l=a.annexBlanks.find(p=>p.number==Number(o));return l?l.id:1}var i;if(this.fgis.fgisType=="rss"&&this.mode=="declarations"){console.log("this.sign.createSignedFile.body :>> ",this.sign.createSignedFile.body);var n=[];this.sign.createSignedFile.body.annexes.forEach(a=>{a.annexBlanks.forEach(o=>{n.push(Number(o.blankNumber))})}),i=this.fgis.fetch(this.sign.registrateBlanks,{body:{certificateBlankNumber:this.sign.createSignedFile.body.blankNumber,annexBlankNumbers:n}}).then(a=>(this.sign.createSignedFile.body.idBlank=a.certificateBlank.id,console.log("blanksWithIds :>> ",a),this.sign.createSignedFile.body.annexes.forEach(o=>{o.annexBlanks.forEach(l=>{l.idBlank=s(a,l.blankNumber)})}),this.fgis.fetch(this.sign.createSignedFile,{body:this.sign.createSignedFile.body})))}else i=this.fgis.fetch(this.sign.createSignedFile,{body:this.sign.createSignedFile.body});return i.then(a=>{this.logData.createSignedFile={body:this.sign.createSignedFile.body,response:t(a)}})}createsignui(){var e=this.logData.createSignedFile.response.items.map(s=>s.idFile),t={clientSigningMode:"Batch",fileIds:e,returnUrl:""};return this.fgis.fetch(this.sign.createsignui,{body:t}).then(s=>{this.logData.createsignui={body:t,response:s}})}signDocument(){awaitMessage.push({url:this.logData.createsignui.response.url,command:"loaded",responce:{command:"start",operationId:this.logData.createsignui.response.operationId,currentCertificate:{Index:parseInt(this.settings.indexCertif),Algorithm:parseInt(this.settings.algorithm)},pinCode:this.settings.pwdCertif}});var e,t=this;function s(){return t.fgis.fetch(t.fgis.sign.updatestate,{params:{id:t.logData.createsignui.response.operationId}})}function i(){return t.fgis.fetch(t.fgis.sign.collectsignatures,{params:{id:t.logData.createsignui.response.operationId}})}function n(){return t.fgis.fetch(t.fgis.sign.signaturesinfo,{params:{fileId:t.logData.createSignedFile.response.items[0].idFile}})}return S.tabs.create({url:this.logData.createsignui.response.url,active:!1}).then(a=>e=a).then(()=>this.checkMessage(this.logData.createsignui.response.url)).then(()=>s()).then(()=>i()).then(()=>n()).then(()=>{var a;switch(this.mode){case"declarations":a=this.fgis.fetch(this.fgis.sign.dsSend,{body:this.createSignedFileBody});break;case"applications":a=this.fgis.fetch(this.fgis.sign.send,{body:this.createSignedFileBody});break}return a}).finally(()=>{S.tabs.remove([e.id])})}checkMessage(e){var t=0;return new Promise((s,i)=>{var n=function(){var a=stateMessage.find(l=>l.command=="signDone"&&l.url==e);if(a)return stateMessage=stateMessage.filter(l=>l.command!=="signDone"&&l.url!==e),s();var o=stateMessage.find(l=>l.command=="signError"&&l.url==e);o&&i("ФГИС сломался : "+o.msg),t>=90?i("Превышен лимит ожидания подписи"):(t+=1,setTimeout(n,1e3))};n()})}}class X{constructor({token:e,advance:t,mode:s,settings:i,fgisType:n}){G(s),this.token=e,this.advance=t,this.mode=s,this.settings=i,this.fgisType=n,this.maxRepeat=5,this.repeatCount=1,this.pub_document_type=this._get_pub_document_type(this.fgisType),this.sub_type_name=this._get_sub_type_name(this.fgisType),this.domain=this._get_domain(this.fgisType),this.full_url_pattern=this._get_full_url_pattern(this.fgisType),this.document_url=this._get_document_url(this.domain,this.fgisType,this.full_url_pattern),this.agencyData=n=="srd"?!1:this.getOrganData(),this.headers=new Headers,this.statement_url=`${this.domain}/${this.fgisType}/application/view/`,this.pub_document_url=`https://pub.fsa.gov.ru/${this.pub_document_type}/${this.full_url_pattern}/view/`,this.sign={updatestate:{method:"POST",url:"/api/v1/storage/common/signop/{id}/updatestate",params:["id"],repeat:!0,maxRepeat:10},collectsignatures:{method:"POST",url:"/api/v1/storage/common/signop/{id}/collectsignatures",params:["id"],repeat:!0,maxRepeat:10,noObjResp:!0},signaturesinfo:{method:"GET",url:"/api/v1/storage/common/files/{fileId}/signaturesinfo",params:["fileId"],repeat:!0,maxRepeat:10},send:{method:"POST",url:`/api/v1/${this.fgisType}/common/applications/send`,repeat:!0,maxRepeat:10,timeOut:3e4},dsSend:{method:"POST",url:`/api/v1/${this.fgisType}/common/${this.sub_type_name}/publish`,repeat:!0,maxRepeat:10,timeOut:3e4}},this.statement={init:{errName:"this.statement.init",method:"POST",url:`/api/v1/${this.fgisType}/common/applications/draft`,repeat:!0,maxRepeat:10,errfun:this.statement_init_errfun},get:{method:"GET",url:`/api/v1/${this.fgisType}/common/applications/{id}`,params:["id"],repeat:!0,maxRepeat:10,timeOut:3e4},post:{method:"POST",url:`/api/v1/${this.fgisType}/common/applications/{id}`,params:["id"],repeat:!0,maxRepeat:5,noObjResp:!0}},this.document={init:{method:"POST",url:`/api/v1/${this.fgisType}/common/${this.sub_type_name}/draft`,repeat:!0,maxRepeat:10},loadFile:{method:"POST",url:"/api/v1/storage/common/files",bodyType:"FormData",repeat:!0,maxRepeat:10,timeOut:3e4},get:{method:"GET",url:`/api/v1/${this.fgisType}/common/${this.sub_type_name}/{id}`,params:["id"],repeat:!0,maxRepeat:10,timeOut:1e4},post:{method:"POST",url:`/api/v1/${this.fgisType}/common/${this.sub_type_name}/{id}`,params:["id"],repeat:!0,maxRepeat:5,noObjResp:!0}},this.errorBook={},console.log("Fgis :>> ",this)}_get_document_url(e,t,s){switch(t){case"rds":case"rss":return`${e}/${t}/${s}/view/`;case"srd":return`${e}/${t}/view/`;default:T("Не известный document_url.")}}_get_domain(e){switch(e){case"rds":case"rss":return"http://10.250.74.17";case"srd":return"https://srd.fsa.gov.ru";default:T("Не известный domain.")}}_get_full_url_pattern(e){switch(e){case"rss":return"certificate";case"srd":case"rds":return"declaration";default:T("Не известный full_url_pattern.")}}_get_pub_document_type(e){switch(e){case"rds":case"srd":return"rds";case"rss":return"rss";default:T("Не известный pub_document_type.")}}_get_sub_type_name(e){switch(e){case"rds":case"srd":return"declarations";case"rss":return"certificates";default:T("Не известный sub_type_name.")}}random_uuid(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}fetchErrParser(e,t,s){switch(e.errName){case"this.statement.init":break;default:return t}}getOrganData(){return this.advance.fetch(this.advance.data.agencyData).then(e=>e)}signFile(e=[],t="",s={}){(!Array.isArray(e)||e.length==0)&&T(`Пустой список документов для подписания: ${e}`);var i=new q(e,this,t||this.mode,this.settings,s);return i.start()}setHeaders(e){switch(e){case"rds":case"rss":return this.agencyData.then(t=>{this.headers.set("Accept","application/json, text/plain, */*"),this.headers.set("Authorization","Bearer "+this.token.getToken()),this.headers.set("Pragma","no-cache"),this.headers.set("Content-Type","application/json"),this.headers.set("lkId",5),this.headers.set("orgId",t.orgId)});case"srd":return Promise.resolve().then(()=>{this.headers.set("Accept","application/json, text/plain, */*"),this.headers.set("Authorization","Bearer "+this.token.getToken()),this.headers.set("Pragma","no-cache"),this.headers.set("Content-Type","application/json"),this.headers.set("lkId",null),this.headers.set("orgId",null)})}}ownException(e){T(`Ошибка во Фгис!. Текст:\r
`+e)}async fetch_with_timeout(e,t,s=3e4){s=Number(s);var i=new AbortController;i.signal;var n=new Promise(function(o,l){setTimeout(()=>{i.abort(),l({result:"Превышен лимит ожидания",msg:"Превышен лимит ожидания"})},s)}),a=new Promise(function(o,l){fetch(e,t).then(p=>o(p)).catch(p=>l(p))});return Promise.race([n,a])}fetch(e,t={body:{},params:{}},s=!1,i=!1,n=!1){try{i==!1?this.repeatCount=1:this.repeatCount++,n?n=n+"_fgis_fetch_"+this.repeatCount:n=this.random_uuid()+"_fgis_fetch_"+this.repeatCount;var a=e.hasOwnProperty("maxRepeat")?e.maxRepeat:this.maxRepeat;return this.setHeaders(this.fgisType).then(()=>{var o=e.url;if(e.params){if(!t.hasOwnProperty("params"))return this.ownException("Для этого запроса обязательны параметры.");e.params.forEach(u=>{if(!t.params.hasOwnProperty(u))return this.ownException(`Кажется вы забыли указать обязательный параметр.
                        ${o}
                        Нужны: ${e.params.toString()}
                        Пришли: ${t.params.toString()}
                        `);o=o.replace(`{${u}}`,t.params[u])})}var l=new URL(o,this.domain),p={method:e.method,credentials:"include",headers:this.headers};switch(e.method){case"POST":e.bodyType&&e.bodyType=="FormData"?(p.body=t.body,p.headers.delete("Content-Type")):p.body=JSON.stringify(Object.assign({},t.body));break}var f=e.hasOwnProperty("timeOut");console.info("--- %s --- Fgis fetch %s / %s : ",n,this.repeatCount,a,l.href,e,t,"timeOut : ",f);var _=e.hasOwnProperty("timeOut")?this.fetch_with_timeout(l.href,p,e.timeOut):fetch(l.href,p);return _.then(u=>u.json().catch(C=>{switch(u.status){case 500:case 502:throw{result:u,msg:"(JSON) Сервис не работает."};case 401:case 403:throw{result:u,msg:"(JSON) Отказано в доступе. Проверьте авторизацию."};case 200:return{};default:throw{result:u,msg:`(JSON) Не известный код ошибки ( status :${u.status}): ${JSON.stringify(u)}`}}})).then(u=>{if(u.status)switch(u.status){default:if(u.status>205)throw{result:u,msg:`Не известная ошибка запроса ( status :${u.status}): ${u.message}`}}if(u.code)switch(u.code){case 401:case 400:throw{result:u,msg:u.description};default:throw{result:u,msg:`Не известная ошибка запроса ( code: ${u.code}): ${u.message?u.message:JSON.stringify(u)}`}}return console.info("--- %s --- Fgis fetch result ",n,u),u}).then(u=>{if(!e.noObjResp&&!Object.keys(u).length&&!u.code&&!u.status)throw{result:u,msg:`Не известная ошибка запроса. Предпологается пустой объект ( obj: ${JSON.stringify(u)})`};return u}).catch(u=>{console.warn("--- %s --- Fgis fetch error ",n,u.result);var C=u.msg;if((s||e.hasOwnProperty("repeat")&&e.repeat)&&a>=this.repeatCount){var E=this;return new Promise(function(k,$){setTimeout(function(){return E.fetch(e,t,s,!0,n).then(F=>k(F)).catch(F=>{$(F)})},1e3)})}else return this.ownException(C)})})}catch(o){return console.error("Ошибка в конструкции fetch в Fgis",o),this.ownException("Ошибка в конструкции fetch в Fgis",o)}}}class Y{constructor(e,t,s,i){this.id=e,this.advance=t,this.fgis=s,this.isTest=i.isTest,this.advanceObj={},this.idApplication="",this.appSubmissionDate="",this.idStatus="",this.log=[],this.uuid=this.random_uuid(),console.log("constructot Statement init with uuid :"+this.uuid)}checkSign(e){return Promise.resolve().then(()=>this.fgis.fetch(this.fgis.statement.get,{params:{id:e}}).then(t=>{if(t.idStatus&&t.idStatus==13)return this.initAdvance(t.idApplication,t.applicationSubmissionDate,t.idStatus).catch(s=>{console.log(s)}).finally(()=>this.markAdvance("Signed"))}))}sign(){return this.markAdvance("Signing").then(()=>this.advance.fetch(this.advance.statement.show,{params:{id:this.id}})).then(e=>{let t;if(!e.idApplication)throw"Заявление не привязано к Адвансу.";if(e.idStatus&&e.idStatus==13)throw"Заявление уже подписано! (по статусу Адванс)";return t=this.checkSign(e.idApplication).then(()=>e.idApplication),t}).then(e=>this.fgis.signFile([e],"applications")).then(()=>this.markAdvance("Signed")).then(()=>({done:!0})).catch(e=>(console.log("something wrong in statement sign",e),e=="Заявление уже подписано! (по статусу Адванс)"?this.markAdvance("Signed"):this.markAdvance("SignError",e).then(()=>{throw e})))}logState(e,t){console.log("Statement:",e,JSON.parse(JSON.stringify(t)))}getList(){var e=this.locationOrigin+a_statement_api.queue.url+"?"+this.api_key;return fetch(e,{method:a_statement_api.queue.method,credentials:"include"}).then(t=>t.json()).then(t=>console.log(t))}workFlow(e=!1,t=!1){return this.advance.fetch(this.advance.statement.get_state,{params:{id:this.id}}).then(s=>{let i;switch(s){case"NotSet":console.log("Statement not ready to upload");break;case"ReadyToUpload":console.log("Statement ready to upload"),i=this.save().then(()=>this.workFlow(e=!0));break;case"Uploading":console.log("Statement in Uploading");break;case"UploadError":console.log("Statement upload UploadError"),e||(i=this.save().then(()=>this.workFlow(e=!0)));break;case"Uploaded":if(console.log("Statement Uploaded done"),t)return{is_need_Signing:this.id};i=this.sign().then(()=>this.workFlow(e=!1));break;case"Signing":console.log("Statement in Signing");break;case"SignError":console.log("Statement Signing SignError"),e||(i=this.save().then(()=>this.workFlow(e=!0)));break;case"Signed":console.log("Statement Signed done");break;default:return{done:!0}}return i})}save(){return console.log("save :>> "),this.markAdvance("Uploading").then(()=>this.showAdvance()).then(()=>this.saveStatementToFgis()).then(()=>this.initAdvance()).then(()=>this.markAdvance("Uploaded")).then(()=>this.done()).catch(e=>{throw console.log("something wrong in statement save",e),this.markAdvance("UploadError",e),e})}getStatement(e){return this.logState("save",this),this.fgis.fetch(this.fgis.statement.get,{params:{id:e}})}updateStatement(e=""){return console.log("Statement updateStatement"),this.advance.fetch(this.advance.statement.show,{params:{id:this.id}}).then(t=>{if(t.idApplication)return e||(e=t.idApplication),this.getStatement(e);throw"Заявление еще не было загруженно."}).then(t=>(console.log(t),this.initAdvance(t.idApplication,t.appSubmissionDate,t.idStatus)))}done(e={done:!0}){return console.log("Statement done",e),e}showAdvance(){return console.log("Statement showAdvance",this),this.advance.fetch(this.advance.statement.show,{params:{id:this.id}}).then(e=>{this.advanceObj=e,this.isTest&&(this.advanceObj.number=(Math.floor(Math.random()*99999)+1).toString()+"/Т"),this.advanceObj.idStatus=20})}markAdvance(e,t=""){return this.advance.getCurrentUserId().then(s=>{let i=[{name:"id",value:this.id},{name:"user_id",value:s},{name:"status",value:e},{name:"message",value:t}];return this.advance.fetch(this.advance.statement.set_status,{body:i})})}initAdvance(e,t,s){return this.advance.getCurrentUserId().then(i=>{this.user_id=i,e||(e=this.idApplication),t||(t=""),s||(s="");let n=[{name:"idApplication",value:e},{name:"statement_url",value:this.fgis.statement_url+e+"/application"},{name:"applicationSubmissionDate",value:t},{name:"idStatus",value:s},{name:"user_id",value:this.user_id}];return this.advance.fetch(this.advance.statement.init,{body:n,params:{id:this.id}}).then(a=>{console.log(a)})})}test(){return[{idProduct:null,idProductOrigin:"840",fullName:"Комплексы вычислительные электронные цифровые: программно-аппаратный комплекс11111 ",marking:null,usageScope:null,storageCondition:'Условия хранения продукции в соответствии с ГОСТ 15150-69 "Машины, приборы и другие технические изделия. Исполнения для различных климатических районов. Категории, условия эксплуатации, хранения и транспортирования в части воздействия климатических факторов внешней среды". Срок хранения (службы, годности) указан в прилагаемой к продукции товаросопроводительной и/или эксплуатационной документации2222',usageCondition:null,batchSize:null,batchId:null,identification:null,identifications:[{idIdentification:6768264,annex:!1,name:"Teradata Intelliflex 1.1. Ð°ÑÑÐ¸ÐºÑÐ» 9185-1100-8090, Teradata 2800 (BAR) Data Warehouse Appliance, Ð°ÑÑÐ¸ÐºÑÐ» 9190-Ð¢004-8090 (9190-T010-8090, 9190-T011-8090), Teradata Multipurpose Server (TMS) 8-21X Ð´Ð»Ñ ÐÐ SAS VA, Ð°ÑÑÐ¸ÐºÑÐ» 9128-T518-8090, 9175-2100-8090 ",type:null,tradeMark:null,model:null,article:null,sort:null,idOkpds:[],idTnveds:[73522],gtin:[""],lifeTime:null,storageTime:null,description:null,amount:null,idOkei:null,factoryNumber:null,productionDate:null,expiryDate:null,documents:[],standards:[{idStandard:3073291,annex:!1,idDictStandard:null,designation:'ГОСТ IEC 60950-1- 2014 "Оборудование информационных технологий. Требования безопасности. Часть 1. Об',name:null,section:null,addlInfo:null,idStatus:null}]}]}]}middleUpdaterFgis(e){let t=Object.assign({},e);return t.manufacturer.addresses.forEach(s=>{s.foreignDistrict=null}),t.manufacturerFilials.forEach(s=>{s.addresses.forEach(i=>{i.foreignDistrict=null})}),t}saveStatementToFgis(){console.log("Statement saveStatementToFgis");let e,t=this.middleUpdaterFgis(this.advanceObj);return t.idApplication?(console.log("Update record in fgis",t),e=this.fgis.fetch(this.fgis.statement.post,{body:t,params:{id:t.idApplication}}).then(s=>{this.idApplication=t.idApplication})):(console.log("Create record in fgis",t),e=this.fgis.fetch(this.fgis.statement.init,{body:t}).then(s=>this.fgis.fetch(this.fgis.statement.get,{params:{id:s.id}}).then(i=>{console.log("saveStatementtoFgis",i),this.idApplication=i.idApplication,this.appSubmissionDate=i.appSubmissionDate,this.idStatus=i.idStatus,this.number=i.number}))),e}random_uuid(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}}console.log("Statement ds class init!");function Q(r){throw console.error(r),r}class v{constructor(e,t){this.document=e,this.advance=e.advance,this.documentId=e.id,this.document_name=t,this.controller=this.advance.document[t]}getList(){return console.log("getList :>> "),this.controller.get_list.fetch({params:{id:this.documentId}})}getFile(e){return console.log("getFile :>> ",e),this.controller.get_file.fetch({params:{id:this.documentId,fileId:e}})}putFile(e,t){console.log("putFile :>> ",e,t);const s=[{name:"fgis_file_id",value:t.id}];return this.controller.put_file_info.fetch({body:s,params:{id:this.documentId,fileId:e.file_id}})}putFile2Fgis(e,t){console.log("putFile2Fgis :>> ",e,t);var s=new FormData;s.append("file",new File([t],e.file_name));const i=this.document.fgis.document.loadFile;return this.document.settings.file_time_out&&(i.timeOut=this.document.settings.file_time_out*1e3),this.document.fgis.fetch(i,{body:s})}processFile(e){return console.log("processFile :>> ",e),this.getFile(e.file_id).then(t=>this.putFile2Fgis(e,t)).then(t=>this.putFile(e,t))}processFiles(e){return console.log("processFiles :>> ",e),e.length==0?(console.log("Load files is end"),Promise.resolve()):this.processFile(e[0]).then(()=>(e=e.splice(1),this.processFiles(e)))}process(){return console.log("process :>> ",this),this.getList().then(e=>{if(e.filter(i=>{if(i.fgis_file_id!=null&&i.fgis_file_id!="")return i}).length==e.length)return console.log(`Все ${this.document_name} уже загружены во ФГИС.`),Promise.resolve();const s=e.filter(i=>i.file_name&&!i.fgis_file_id);return this.processFiles(s)})}}class ee{constructor(e,t,s,i,n,a,o){this.id=e,this.advance=t,this.fgis=s,this.settings=i,this.assignRegNumber=i.assignRegNumber,this.isRobotSignErrors=i.isRobotSignErrors,this.isTest=i.isTest,this.advanceType=n,this.isSrd=a,this.fgisType=o,this.idDocumentKey=this._getIdDocumentKey(this.fgisType),this.advanceObj={},this.idApplication="",this.agencyMode=!1,this.fgisId="",this.afterInitObj={},this.idDeclaration="",this.idDocument=0,this.annexeIds="",this.submissionDate="",this.number="",this.idStatus="",this.fileList=[],console.log("Document :>> ",this)}done(e={done:!0}){return console.log("Ds.prototype.done",e),this.documentFgisData&&(e.documentFgisData=this.documentFgisData),e}_getIdDocumentKey(e){switch(e){case"rds":case"srd":return"idDeclaration";case"rss":return"idCertificate";default:Q("Не определен _getIdDocumentKey: "+e)}}markAdvance(e,t=""){return this.advance.getCurrentUserId().then(s=>{let i=[{name:"id",value:this.id},{name:"user_id",value:s},{name:"status",value:e},{name:"message",value:t}];return this.advance.fetch(this.advance.document.set_status,{body:i})})}checkLast(e){return this.advance.fetch(this.advance.document.last).then(t=>{if(t=t.match(/[0-9]{5}/),t=t==null?0:Number(t[0]),e=e.match(/[0-9]{5}/),e=e==null?0:Number(e[0]),t&&e){if(e-t!=1)throw`Вы пытаетесь загрузить номер не идущий за последним выгруженным. Последний:${t} / Ваш: ${e}`}else throw`Не могу сравнить рег. номера ФГИС и адванса. Последний:${t} / Ваш: ${e}`})}workFlow(e=!1){return this.advance.fetch(this.advance.document.get_state,{params:{id:this.id}}).then(t=>{let s;switch(t){case"NotSet":console.log("Statement not ready to upload");break;case"ReadyToUpload":console.log("Statement ready to upload"),s=this.save().then(()=>this.workFlow(e=!0));break;case"Uploading":console.log("Statement in Uploading");break;case"UploadError":console.log("Statement upload UploadError"),e||(s=this.save().then(()=>this.workFlow(e=!0)));break;case"Uploaded":console.log("Statement Uploaded done"),s=this.sign().then(()=>this.workFlow(e=!1));break;case"Signing":console.log("Statement in Signing");break;case"SignError":console.log("Statement Signing SignError"),e||(s=this.save().then(()=>this.workFlow(e=!0)));break;case"Signed":console.log("Statement Signed done");break;default:return this.done()}return s})}checkSign(e){return Promise.resolve().then(()=>this.fgis.fetch(this.fgis.document.get,{params:{id:e}}).then(t=>{if(t.idStatus&&t.idStatus==13)return this.initAdvance(t.idApplication,t.submissionDate,t.idStatus,t.number).catch(s=>{console.log(s)}).finally(()=>{throw"Документ уже подписан! (по статусу ФГИС)"})}))}sign(){return this.markAdvance("Signing").then(()=>this.advance.fetch(this.advance.document.show,{params:{id:this.id}})).then(e=>{if(!e[this.idDocumentKey])throw"Документ не привязан к Адвансу.";if(e.idStatus&&e.idStatus==13)throw"Документ уже подписан! (по статусу Адванс)";return this.checkSign(e[this.idDocumentKey]).then(()=>e[this.idDocumentKey])}).then(e=>(this.documentFgisData={idDeclaration:e,url:`${this.fgis.document_url}${e}`,open_url:`${this.fgis.pub_document_url}${e}`},this.fgisType=="rss"?this.advance.fetch(this.advance.document.blanks,{params:{id:this.id}}).then(t=>this.fgis.signFile([e],"declarations",t)):this.fgis.signFile([e],"declarations"))).then(()=>this.markAdvance("Signed")).then(()=>({done:!0})).catch(e=>(console.log("something wrong in statement sign",e),this.markAdvance("SignError",e).then(()=>{throw e})))}initAdvance(e=this.idDeclaration,t=this.submissionDate,s=this.idStatus,i=this.number||""){return this.advance.getCurrentUserId().then(n=>{this.user_id=n;let a={idDeclaration:e,url:`${this.fgis.document_url}${e}`,submissionDate:t,number:i,idStatus:s,user_id:this.user_id};this.fgisType=="rss"&&(a.annexes=this.annexeIds),i&&(a.open_url=`${this.fgis.pub_document_url}${e}`),this.documentFgisData=a;let o=Object.keys(a).map(l=>({name:l,value:a[l]}));return this.advance.fetch(this.advance.document.init,{body:o,params:{id:this.id}}).then(l=>{console.log(l)})})}checkSignStatement(){return console.log("Document checkSignStatement"),this.showAdvance().then(e=>{if(!e.idApplication)throw"Завление не загружено вовсе! Дальше продолжать нельзя.";return console.log("Document checkSignStatement middle",e,this.fgis),this.fgis.fetch(this.fgis.statement.get,{params:{id:e.idApplication}})}).then(e=>{if(console.log(e),e.idStatus!=13)throw"Завление не подписано."})}getDocumentFilesAdvance(){return console.log("Document getDocumentFilesAdvance"),this.advance.fetch(this.advance.document.get_document_files,{params:{id:this.id}})}getProtocolsAdvance(){return console.log("Document getProtocolsAdvance"),this.advance.fetch(this.advance.document.get_protocols,{params:{id:this.id}})}getFileProtocolAdvance(e){return this.advance.fetch(this.advance.document.get_file_protocol,{params:{id:this.id,fileId:e}})}loadFileItemFgis(e,t=!1){console.log("loadFileItemFgis",e);let s;return t?s=this.advance.fetch(this.advance.document.get_file_document,{params:{id:this.id,fileId:e.file_id}}):s=this.advance.fetch(this.advance.document.get_file_protocol,{params:{id:this.id,fileId:e.file_id}}),s.then(i=>{console.log("body",i);var n=new FormData,a=new File([i],e.file_name);n.append("file",a);let o=this.fgis.document.loadFile;return this.settings.file_time_out&&(o.timeOut=this.settings.file_time_out*1e3),this.fgis.fetch(o,{body:n})}).then(i=>t?this.putFileDocumentAdvance(i.id,e.file_id):this.putFileProtocolAdvance(i.id,e.file_id))}putFileDocumentAdvance(e,t){let s=[{name:"fgis_file_id",value:e}];return this.advance.fetch(this.advance.document.put_file_document,{body:s,params:{id:this.id,fileId:t}})}putFileProtocolAdvance(e,t){let s=[{name:"fgis_file_id",value:e}];return this.advance.fetch(this.advance.document.put_file_protocol,{body:s,params:{id:this.id,fileId:t}})}promiseLoadFiles(e=!1){if(this.fileList.length==0){console.log("Load files is end");return}return this.loadFileItemFgis(this.fileList[0],e).then(()=>(this.fileList=this.fileList.splice(1),this.promiseLoadFiles(e)))}promiseLoadDocumentFiles(){if(this.fileList.length==0){console.log("Load files is end");return}return this.loadFileItemFgis(this.fileList[0]).then(()=>(this.fileList=this.fileList.splice(1),this.promiseLoadFiles()))}loadDocumentFileFgis(e){console.log(e);let t=e.filter(i=>i.file_name==null);if(t.length>0)throw`К записи ${t.map(n=>n.title)} не прикреплен файл`;return e.filter(i=>i.fgis_file_id!=null&&i.fgis_file_id!="").length==e.length?(console.log("Все файлы уже загружены во ФГИС."),Promise.resolve()):(this.fileList=e,this.promiseLoadFiles(!0))}loadFileFgis(e){return e.filter(s=>{if(s.fgis_file_id!=null&&s.fgis_file_id!="")return s}).length==e.length?(console.log("Все протоколы уже загружены во ФГИС."),Promise.resolve()):(this.fileList=e.filter(s=>s.file_name),this.promiseLoadFiles())}add_revocation_data(e,t){var s={};t==1?s={idStatus:14,beginDate:new Date,comment:"В связи с технической ошибкой",idBasis:1,publicated:!1,docDate:new Date,docName:this.settings.revoke_teh_document,docNumber:this.settings.revoke_teh_document_number}:t==2&&(s={idStatus:14,beginDate:new Date,comment:"По решению заявителя",idBasis:8,publicated:!1,docDate:new Date,docName:this.settings.revoke_applicant_document,docNumber:this.settings.revoke_applicant_document_number});var i=e.statusChanges.filter(n=>n.idStatus==14&&n.publicated==!1);return i.length?!1:(e.statusChanges.push(s),!0)}revoke(e){return this.markAdvance("Uploading").then(()=>this.showAdvance()).then(t=>this.fgis.fetch(this.fgis.document.get,{params:{id:t[this.idDocumentKey]}})).then(t=>(this.add_revocation_data(t,e),this.updateDocumentInFgis(t))).then(()=>this.markAdvance("Uploaded")).then(()=>this.done()).catch(t=>{throw console.log("something wrong in document save",t),this.markAdvance("UploadError",t),t})}save(){return console.log("Ds.Document.save",this.id),this.markAdvance("Uploading").then(()=>this.getProtocolsAdvance()).then(e=>this.loadFileFgis(e)).then(()=>this.getDocumentFilesAdvance()).then(e=>this.loadDocumentFileFgis(e)).then(()=>this.fgisType=="rss"?Promise.resolve().then(()=>new v(this,"product_doc").process()).then(()=>new v(this,"other_doc").process()).then(()=>new v(this,"conclusion_doc").process()).then(()=>new v(this,"sampling_doc").process()).then(()=>new v(this,"qms_doc").process()).then(()=>new v(this,"act_doc").process()).then(()=>new v(this,"cert_doc").process()).then(()=>new v(this,"transport_doc").process()).then(()=>new v(this,"cert_type_doc").process()).then(()=>new v(this,"project_doc").process()).then(()=>new v(this,"un_rules_doc").process()).then(()=>new v(this,"concl_expert_doc").process()).then(()=>new v(this,"test_protocol_doc").process()).then(()=>new v(this,"contract_doc").process()).then(()=>new v(this,"decision_doc").process()).then(()=>new v(this,"cert_other_doc").process()):Promise.resolve()).then(()=>this.showAdvance()).then(e=>this.saveDocumentToFgis(e)).then(()=>this.initAdvance()).then(()=>this.markAdvance("Uploaded")).then(()=>this.done()).catch(e=>{throw console.log("something wrong in document save",e),this.markAdvance("UploadError",e),e})}showAdvance(){return console.log("showAdvance Document Start",this.id),this.advance.fetch(this.advance.document.show,{params:{id:this.id}})}getExperts(e){return this.advance.fetch(this.advance.data.experts).then(t=>{let s=t.find(i=>i.id==e);if(!s)throw"Эксперт не найден в справочник";return s})}saveDocumentAsRegToFgis(e){return console.log(e),console.log("saveDocumentAsRegToFgis"),e.assignRegNumber=!0,Promise.resolve().then(()=>{let t;return e[this.idDocumentKey]&&(console.log("Update record in fgis"),t=this.fgis.fetch(this.fgis.document.post,{body:e,params:{id:e[this.idDocumentKey]}}).then(()=>this.fgis.fetch(this.fgis.document.get,{params:{id:e[this.idDocumentKey]}}).then(s=>{this.idDeclaration=s[this.idDocumentKey],this.submissionDate=s.submissionDate,this.idStatus=s.idStatus,this.number=s.number,this.findRssAnnexeIds(s)}))),t})}findRssAnnexeIds(e){console.log("findRssAnnexeIds")}updateDocumentInFgis(e){return Promise.resolve().then(()=>this.fgis.fetch(this.fgis.document.post,{body:e,params:{id:e[this.idDocumentKey]}}))}middleUpdaterFgis(e){console.log("start middleUpdaterFgis :>> ",e);let t=Object.assign({},e);return t.testingLabs.forEach(s=>{var i=[];s.customInfo.forEach(n=>{n.customDeclNumber=n.customDeclNumber.replace(".",","),n.customDeclNumber=n.customDeclNumber.replace(";",",");var a=n.customDeclNumber.replace(" ","").split(",");a.forEach(o=>{i.push({amount:n.amount,contractNumber:n.contractNumber,contractDate:n.contractDate,customDeclNumber:o})}),s.customInfo=i})}),this.fgis.pub_document_type=="rds"&&t.testingLabs.forEach(s=>{s.protocols.forEach(i=>{var n=t.scanCopy.find(a=>a.name==i.number);n||t.scanCopy.push({name:i.number,idFile:i.idFile,idType:4})})}),t.manufacturer.addresses.forEach(s=>{s.foreignDistrict=null}),t.manufacturerFilials.forEach(s=>{s.addresses.forEach(i=>{i.foreignDistrict=null})}),t}updateSelfDocumentValues(e){if(this.idDeclaration=e[this.idDocumentKey]||this.idDeclaration,this.submissionDate=e.submissionDate||this.submissionDate,this.idStatus=e.idStatus||this.idStatus,this.number=e.number||this.number,this.fgisType=="rss"){let t="";e.annexes.forEach(s=>{t+=`${s.idType}-${s.idAnnex};`}),this.annexeIds=t,console.log("findRssAnnexeIds,",t)}return e}saveDocumentToFgis(t){var t=this.middleUpdaterFgis(t);console.log("Document saveDocumentToFgis",t),this.agencyMode=t.agencyMode,delete t.agencyMode,this.agencyMode&&this.assignRegNumber&&(t.assignRegNumber=!0);var s=Promise.resolve().then(()=>t[this.idDocumentKey]?(console.log("Update record in fgis"),this.fgis.fetch(this.fgis.document.post,{body:t,params:{id:t[this.idDocumentKey]}}).then(()=>t[this.idDocumentKey])):this.fgis.fetch(this.fgis.document.init,{body:t}).then(i=>i.id)).then(i=>(this.idDeclaration=i,!this.agencyMode&&!t[this.idDocumentKey]?this.initAdvance():i)).then(()=>{if(!this.agencyMode)return this.fgis.fetch(this.fgis.document.get,{params:{id:this.idDeclaration}}).then(i=>{if(t.idDeclaration=i[this.idDocumentKey],t.idCertificate=i[this.idDocumentKey],t.submissionDate=i.submissionDate,t.idStatus=i.idStatus,t.number=i.number,this.updateSelfDocumentValues(i),this.assignRegNumber)return this.saveDocumentAsRegToFgis(t)})});return s}testEtalon(){var e={annexes:[],applicant:{addlRegInfo:"",addresses:[{flat:null,foreignCity:null,foreignDistrict:null,foreignHouse:null,foreignLocality:null,foreignStreet:null,fullAddress:"127055, РОССИЯ, ГОРОД МОСКВА, УЛИЦА НОВОСЛОБОДСКАЯ, ДОМ 36/1, СТР 1, ПОМ I КОМН 21",gln:null,glonass:null,idAddress:null,idAddrType:1,idCity:null,idCodeOksm:"643",idDistrict:null,idHouse:null,idLocality:null,idStreet:null,idSubject:null,oksmShort:!0,otherGln:null,postCode:null,uniqueAddress:null}],contacts:[],firstName:"АНАСТАСИЯ",fullName:'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ "АРТЭКС"',headPosition:"ГЕНЕРАЛЬНЫЙ ДИРЕКТОР",idApplicantType:1,idEgrul:null,idLegalForm:9,idLegalSubject:null,idLegalSubjectType:1,idPerson:null,inn:"7707388278",isEecRegister:!0,kpp:"770701001",manufIsApplicant:!1,ogrn:"1177746689757",ogrnAssignDate:"2017-07-12T00:00:00.000Z",passportIssueDate:null,passportIssuedBy:null,passportNum:null,patronymic:"АНДРЕЕВНА",regDate:"2017-07-12T00:00:00.000Z",regOrganName:"Межрайонная инспекция Федеральной налоговой службы № 46 по г. Москве",shortName:'ООО "АРТЭКС"',snils:"",surname:"ВАСИЛЬКОВА",transnational:null},applicantFilials:[],applicationDate:"2022-04-08T00:00:00.000Z",applicationNumber:"261018/1/C..",applicationSendDate:"2022-04-03T00:00:00.000Z",applicationStatus:null,assignRegNumber:!1,awaitForApprove:!0,awaitOperatorCheck:null,batchInspection:null,blankNumber:null,certEndDate:null,certificationAuthority:{accredOrgName:"Межрайонная инспекция Федеральной налоговой службы № 12 по Тверской области",addresses:[{flat:null,fullAddress:"170100, РОССИЯ, ОБЛ. ТВЕРСКАЯ, Г. Тверь, УЛ. ВОЛЬНОГО НОВГОРОДА, Д. 21, ПОМЕЩ. 8-9",gln:null,idAddress:null,idAddrType:1,idCity:null,idCodeOksm:null,idDistrict:null,idHouse:null,idLocality:null,idStreet:null,idSubject:null,oksmShort:!0,postCode:null},{flat:null,fullAddress:"170100, РОССИЯ, Тверская обл, г Тверь, ул Вольного Новгорода, дом 21, Помещение 8-9",gln:null,idAddress:null,idAddrType:3,idCity:"c52ea942-555e-45c6-9751-58897717b02f",idCodeOksm:"643",idDistrict:null,idHouse:"d2d7b72f-aaac-4529-a78b-f650723add48",idLocality:null,idStreet:"bae8f562-e58d-4e2d-aa76-236d6f7f12a0",idSubject:"61723327-1c20-42fe-8dfa-402638d9b396",oksmShort:!0,postCode:"170100"}],attestatEndDate:null,attestatRegDate:"2016-10-26T00:00:00.000Z",attestatRegNumber:"RA.RU.11АЖ06",contacts:[{idContact:null,idContactType:1,value:"+74822415522"},{idContact:null,idContactType:4,value:"all@greenline-os.ru"},{idContact:null,idContactType:5,value:"http://greenline-os.ru/"}],firstName:"Андрей",fullName:'Орган по сертификации Общества с ограниченной ответственностью "ГринЛайн"',headContacts:[],headPosition:"Руководитель ОС",idCertificationAuthority:null,idPesron:612842,idRal:401,ogrn:"1156952024745",patronymic:"Алексеевич",prevAttestatRegNumber:null,prevIdRal:null,surname:"Сорокин"},certIssueDecisionDate:null,certRegDate:"2022-04-10T14:48:08.239Z",changes:null,deadlineViolation:!1,documents:{applicantOtherDocuments:[],applicationCertificationDecision:{date:null,id:null,number:null},commonDocuments:{8:[]},conformityAssessmentDocuments:[],expertConclusion:{accreditedPersonName:null,annex:null,attestateBeginDate:null,attestateEndDate:null,attestateRegNumber:null,date:null,idFile:null,name:null,number:null},foreignManufacturerContract:{applicantResponsibility:null,date:null,endDate:null,id:null,manufacturerResponsibility:null,number:null,subject:null},manufacturingConditionAnalysisAct:{addresses:[],analysisBeginDate:null,analysisEndDate:null,analysisTakenDate:null,annex:null,certExperts:[],date:null,id:null,idFile:null,number:null},productCertificationContract:{date:null,id:null,idFile:null,number:null},productDesignResearchConclusion:{annex:null,attestatEndDate:null,id:null,issueDate:null,number:null},productTypeCertificates:[{annex:null,attestatEndDate:null,id:null,idPtCertificate:null,idTechnicalReglament:8,issueDate:null,number:null,sampleProduct:{article:null,fullName:null,mark:null,model:null,sort:null,type:null}}],productTypeResearchConclusion:{annex:null,attestatEndDate:null,id:null,issueDate:null,number:null,sampleProduct:{article:null,fullName:null,mark:null,model:null,sort:null,type:null}},protocolTestingTechnicalService:{annex:null,date:null,idFile:null,name:null,number:null,techServiceName:null},qmsCertificates:[{accredEec:!0,accreditedPersonName:null,annex:null,attestatEndDate:null,attestatRegDate:null,attestatRegNumber:null,endDate:null,id:null,idAccredPlace:"643",idTechnicalReglament:8,idType:null,idTypeActivity:null,issueDate:null,number:null,qmsCertificationDocuments:[],regNumberSelect:null}],rawMaterialCertificates:[],reportsOnTypeApprovalUnderUNRegulation:[{annex:null,country:"643",date:null,idFile:null,idTechnicalReglament:8,name:null,number:null,orgName:null}],samplingAct:{date:null,id:null,idFile:null,number:null},vehicleChassisTypeApprovals:[]},draftCreationDate:null,editApp:!1,employee:null,experts:[],expiredInspectionControl:!1,firstName:null,functions:null,idApplication:3073128,idApplicationStatus:null,idBlank:null,idCertificate:null,idCertScheme:3,idCertType:1,idEmployee:null,idObjectCertType:2,idProductSingleLists:[],idSigner:null,idStatus:20,idTechnicalReglaments:[8],inspectionControlPlanDate:null,inspectionControls:[],manufacturer:{addlRegInfo:"",addresses:[{flat:null,foreignCity:null,foreignDistrict:"Kupferschmidstrasse 84 D 79761 Waldshut-Tiengen",foreignHouse:null,foreignLocality:null,foreignStreet:null,fullAddress:"ГЕРМАНИЯ, Kupferschmidstrasse 84 D 79761 Waldshut-Tiengen",gln:null,glonass:null,idAddress:null,idAddrType:1,idCity:null,idCodeOksm:"276",idDistrict:null,idHouse:null,idLocality:null,idStreet:null,idSubject:null,oksmShort:!0,otherGln:null,postCode:null,uniqueAddress:null}],contacts:[],firstName:"",fullName:"«Ragman Textilhandel GmbH»",headPosition:"",idApplicantType:null,idEgrul:null,idLegalForm:null,idLegalSubject:null,idLegalSubjectType:3,idPerson:null,inn:"",isEecRegister:!0,kpp:"",ogrn:"",ogrnAssignDate:null,passportIssueDate:null,passportIssuedBy:null,passportNum:null,patronymic:"",regDate:null,regOrganName:"",shortName:"",snils:"",surname:"",transnational:[]},manufacturerFilials:[{addresses:[{flat:null,foreignCity:null,foreignDistrict:"Kupferschmidstrasse 84 D 79761 Waldshut-Tiengen",foreignHouse:null,foreignLocality:null,foreignStreet:null,fullAddress:"ГЕРМАНИЯ, Kupferschmidstrasse 84 D 79761 Waldshut-Tiengen",gln:null,glonass:null,idAddress:null,idAddrType:3,idCity:null,idCodeOksm:"276",idDistrict:null,idHouse:null,idLocality:null,idStreet:null,idSubject:null,oksmShort:!0,otherGln:null,postCode:null,uniqueAddress:null}],annex:!1,contacts:[],fullName:null,idFilial:null,idLegalForm:null,kpp:null,shortName:null}],manufIsApplicant:!1,noSanction:!0,number:null,patronymic:null,product:null,productGroups:[{idGroup:1826,idProductGroup:null,idTechReg:8}],publishDate:null,scanCopy:[{idFile:"42651d67-ac73-4555-8338-002cb979b6ec",idType:1,name:"Завление"}],snils:null,statusChanges:[],surname:null,tempNumber:null,testingLabs:[]};return e}}console.log("Document ds class init!");class te{constructor({id:e,token:t,locationOrigin:s,mode:i,settings:n,advanceType:a,isSrd:o}){try{this.name="Менеджер деклараций",this.advanceType=a,this.isSrd=o,this.fgisType=this._get_fgis_type(this.advanceType,this.isSrd),console.log("this.advanceType :>> ",this.advanceType),console.log("this.isSrd :>> ",this.isSrd),console.log("this.fgisType :>> ",this.fgisType),this.advance=new z(n,s,a),console.log("this.advance :>> ",this.advance),this.fgis=new X({token:t,advance:this.advance,mode:i,settings:n,fgisType:this.fgisType}),console.log("this.fgis :>> ",this.fgis),this.statement=new Y(e,this.advance,this.fgis,n),console.log("this.statement :>> ",this.statement),this.document=new ee(e,this.advance,this.fgis,n,this.advanceType,this.isSrd,this.fgisType),console.log("this.document :>> ",this.document),console.log("Ds :>> ",this)}catch(l){console.log("error :>> ",l)}}_get_fgis_type(e,t){if(t)return"srd";switch(e){case"DTREA":case"DGSTR":case"DPRTR":return"rds";case"STREA":return"rss";default:throw console.error("Ошибка определения fgisType, ",e),"Ошибка определения fgisType: "+e}}doAction(e=""){console.log(`${this.name} - ${e}`);let t;switch(e){case"updateStatement":t=this.statement.updateStatement();break;case"revokeDs":t=this.document.revoke();break;case"signStatement":t=this.statement.sign();break;case"signDeclaration":t=this.document.sign();break;case"saveCommonDs":t=this.statement.save();break;case"saveDeclarationDs":t=this.document.save();break;case"revokeTeh":t=this.document.revoke(1);break;case"revokeApplicant":t=this.document.revoke(2);break;case"statementGetList":t=this.statement.getList();break;case"startReplication":t=this.statement.workFlow().then(()=>this.document.workFlow());break;default:t=Promise.resolve().then(()=>{throw console.error(`${this.name}: Для функции ${e} нет описания.`),`${this.name}: Для функции ${e} нет описания.`});break}return t}}console.log("ya tut");var U=new J;U.start();var O={},N=[],V,K,se,R=[];function ie(r){console.log("Background",r),K=r,K.onMessage.addListener(function(e){return console.log("Background m",e),!0})}function ne(r){console.log(se),console.log(`Background ${r.name} connected`);let e=R.find(t=>t==r);console.log(R,e),e||R.push(r),r=r,r.onMessage.addListener(function(t){return console.log(R,this),console.log(`${this.name} write`,t),!0})}function re(r){if(console.log("CONNECTED IS RUN",r),r.name=="replication-page")return ie(r);if(r.name.includes("lucky_bot"))return ne(r);V=r,V.onMessage.addListener(function(e){if(e.type!="stateMessage"){var t=N.find(s=>s.url==e.url&&s.command==e.command);console.log("In background script, received message from content script",e,N,t),t?(console.log("We await u maaan!"+e.url),N=N.filter(s=>s!=t),console.log("Get this!",t.responce),this.portFromCS.postMessage(t.responce)):console.log("We dont await message from this url:"+e.url)}})}S.runtime.onMessage.addListener(ae),S.runtime.onConnect.addListener(re);function ae(r,e,t){if(console.log("YA HANDLE MESSAGE"),!r.pageName){if(r.action=="get_experts"){var s=new organ_expert_old(U,r.orgId);return s.start().then(l=>t({data:JSON.stringify(l)})),!0}var i,n={};if(r.document_token)n=Object.assign({},r.settings),n.document_token=r.document_token,n.assignRegNumber=!0;else{if(O.originSettings){if(n=O.originSettings.filter(l=>l.origin==r.locationOrigin),!n.length||!Object.keys(n[0]).length)return t({done:!1,err:"Что то не так с настройками пользователя!"}),!0}else return t({done:!1,err:"Что то не так с настройками пользователя!"}),!0;if(n=n[0],!n.agency_code||!n.agency_keyword)return t({done:!1,err:"Введите апи ключи для органа."}),!0;if(!r.module)return t({done:!1,err:"Не указан модуль."}),!0}switch(console.log("request :>> ",r),r.module){case"ds":var a={id:r.id,token:U,locationOrigin:r.locationOrigin,mode:r.mode,settings:n,advanceType:r.advanceType||r.type,isSrd:r.isSrd==null?!1:r.isSrd},o=new te(a);i=o.doAction(r.action);break;case"parser":console.log("We stopped parser starter");break;default:i=Promise.resolve().then(()=>{throw`Не найден модуль: ${r.module}, запрос ${r.action}`});break}return i.then(l=>{var p=Object.assign(l,{done:l.done});return console.log("sendResponse",p),t(p)}).catch(l=>(console.log("catch sendResponse",{done:!1,err:l}),t({done:!1,err:l}))),console.log("-------- KONEC "),!0}}S.storage.local.get().then(r=>{console.log("Storage get in background!",r),O=r}),S.storage.onChanged.addListener(r=>{for(const e in r)r.hasOwnProperty(e)&&(O[e]=r[e].newValue)})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
